name: PolySpace MISRA Compliance Check

on:
  push:
    branches:
      - trigger
  pull_request:
    branches:
      - main

jobs:
  run-misra-check:
    name: Run MISRA Compliance Check with PolySpace
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the PR
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Dagger (CLI version required)
      - name: Set up Dagger
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=$HOME/.local/bin sh
          dagger version

      # Step 3: Initialize Dagger pipeline and pull the PolySpace container from Docker Hub
      - name: Initialize Dagger and pull PolySpace container
        run: |
          # Initialize the Dagger pipeline
          ./bin/dagger pipeline init

          # Pull the PolySpace container image from Docker Hub
          ./bin/dagger container pull docker.io/your-org/polyspace:latest --name polyspace-container

      # Step 4: Run PolySpace MISRA compliance check inside the container
      - name: Run MISRA check with PolySpace
        run: |
          ./bin/dagger container exec polyspace-container \
          polyspace-bug-finder --misra-check -o output.sarif

      # Step 5: Convert SARIF to GitHub-compatible format (if needed)
      - name: Convert SARIF to GitHub standard (optional)
        run: |
          # Use SARIF Multitool or custom script here to process SARIF for GitHub readability
          sarif-tool transform output.sarif converted-output.sarif

      # Step 6: Upload SARIF output to GitHub Advanced Security (GHAS) for display in security tab
      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: output.sarif

      # Step 7: Generate and post human-readable comments to the PR
      - name: Post MISRA Check Results to PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const sarifData = fs.readFileSync('output.sarif', 'utf8');

            // Parse SARIF data and create a summary for developers
            function parseSarif(data) {
              const sarifResults = JSON.parse(data).runs[0].results;
              let commentBody = '### PolySpace MISRA Compliance Report\n\n';
              commentBody += '| Severity | Rule | Message |\n';
              commentBody += '| -------- | ---- | ------- |\n';
              sarifResults.forEach(result => {
                const severity = result.level;
                const rule = result.ruleId;
                const message = result.message.text;
                commentBody += | ${severity} | ${rule} | ${message} |\n;
              });
              return commentBody;
            }

            const commentBody = parseSarif(sarifData);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });

      # Step 8: Set pass/fail status based on SARIF severity
      - name: Set pass/fail status based on SARIF analysis
        if: success() # Ensure it only runs if previous steps succeeded
        run: |
          const fs = require('fs');
          const sarifData = JSON.parse(fs.readFileSync('output.sarif', 'utf8'));
          const hasHighSeverity = sarifData.runs[0].results.some(result => result.level === 'error');

          if (hasHighSeverity) {
            echo "## PolySpace MISRA check failed with high severity issues.";
            exit 1;
          } else {
            echo "## PolySpace MISRA check passed.";
          }

      # Step 9: Stop and clean up PolySpace container
      - name: Stop and clean up PolySpace container
        run: |
          dagger container stop polyspace-container
          dagger container remove polyspace-container
