package main

import (
	"bytes"
	"context"
	"strings"
	"fmt"
	"io"
	"log"

	// "dagger.io/dagger"
	"hello/internal/dagger"
	// "github.com/go-resty/resty/v2"
)

// type Fastapi struct{}

// func (m *FastapiDagger) ScanAndPR(
// 	ctx context.Context,
// 	pullRequestNumber string,
// 	githubRepo string,
// 	githubToken string,
// 	source *dagger.Directory,
// ) (string, error) {
// 	// Create Dagger client
// 	cl, err := dagger.Connect(ctx)
// 	if err != nil {
// 		return "", fmt.Errorf("failed to create dagger client: %v", err)
// 	}
// 	defer cl.Close()

// 	// Create container and run scan
// 	container := cl.Container().
// 		From("python:3.10").
// 		WithDirectory("/src", source).
// 		WithWorkdir("/src").
// 		WithExec([]string{"pip", "install", "-r", "requirements.txt"}).
// 		WithExec([]string{"sh", "-c", "flake8 app || true"})

// 	// Capture stdout
// 	stdout, err := container.Stdout(ctx)
// 	if err != nil {
// 		return "", fmt.Errorf("failed to get stdout: %v", err)
// 	}

// 	// Prepare GitHub comment
// 	commentBody := map[string]string{
// 		"body": fmt.Sprintf("## Scan Results\n\n```\n%s\n```", stdout),
// 	}

// 	// Create HTTP client and post comment
// 	httpClient := resty.New()
// 	commentURL := fmt.Sprintf("https://api.github.com/repos/%s/issues/%s/comments", githubRepo, pullRequestNumber)
	
// 	resp, err := httpClient.R().
// 		SetHeader("Authorization", fmt.Sprintf("Bearer %s", githubToken)).
// 		SetBody(commentBody).
// 		Post(commentURL)

// 	if err != nil {
// 		return "", fmt.Errorf("failed to post comment: %v", err)
// 	}

// 	if resp.StatusCode() == 201 {
// 		return "Comment posted successfully!", nil
// 	}

// 	return fmt.Sprintf("Failed to post comment: %s", resp.String()), nil
// }

type FastAPI struct{}

func (m *FastAPI) Scan(
	ctx context.Context,
	source *dagger.Directory,
) (string, error) {
	container := source.
		WithExec([]string{"pip", "install", "-r", "requirements.txt"}).
		WithExec([]string{"sh", "-c", "flake8 app || true"})

	stdout, err := container.Stdout(ctx)
	if err != nil {
		return "", fmt.Errorf("scan failed: %v", err)
	}

	return stdout, nil
}

// func (fastapi *Fastapi) Scanandpr(
// 	ctx context.Context,
// 	prn string,
// 	githubrepo string,
// 	githubtoken string,
// 	source *dagger.Directory) (string, error) {
// 	message := fmt.Sprintf("%s, %s!", prn, githubrepo)
// 	// Create container and run scan
// 	// container := source.
// 	// 	WithExec([]string{"pip", "install", "-r", "requirements.txt"}).
// 	// 	WithExec([]string{"sh", "-c", "flake8 app || true"})

// 	// // Capture stdout
// 	// stdout, err := container.Stdout(ctx)
// 	// if err != nil {
// 	// 	return "", fmt.Errorf("failed to get stdout: %v", err)
// 	// }

// 	// // Prepare GitHub comment
// 	// commentBody := fmt.Sprintf("## Scan Results\n\n```\n%s\n```", stdout)

// 	// return commentBody, nil
// 	return message, nil
// }

// func main() {
// 	log.Println("Dagger module initialized")
// }